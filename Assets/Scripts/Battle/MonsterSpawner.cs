using System;using System.Collections.Generic;using UnityEngine;public class MonsterSpawner : MonoBehaviour{	private int maxMonsters;	private string[] monsterInfos;	private List<Monster> currentMonsters;	private float spawnTime;	private float minX;	private float maxX;	private float minZ;	private float maxZ;	private DateTime spawnLastTime;	public void Init (LevelInfo level, Vector3 levelSize)	{		maxMonsters = level.MaxCount;		monsterInfos = level.Monsters;		spawnTime = level.SpawnTime;		minX = -levelSize.x / 2;		maxX = levelSize.x / 2;		minZ = -levelSize.z / 2;		maxZ = levelSize.z / 2;		currentMonsters = new List<Monster>();		spawnLastTime = DateTime.MinValue;	}	public List<Monster> Monsters => currentMonsters;	public void Spawn ()	{		var now = DateTime.Now;		if (currentMonsters.Count < maxMonsters && now > spawnLastTime.AddSeconds(spawnTime) )		{			spawnLastTime = now;			var mKind = monsterInfos[UnityEngine.Random.Range(0, monsterInfos.Length)];			var mInfo = GameData.Dict.GetMonster(mKind);			var monsterPath = Constants.FolderMonsters + "/" + mInfo.MonsterView;			Monster prefab = Resources.Load(monsterPath, typeof(Monster)) as Monster;			Monster monster = Monster.Instantiate(prefab, transform.parent, false);			var rand = UnityEngine.Random.Range(0, 2);			float x;			if (rand == 0)			{				x = UnityEngine.Random.Range(-1f, 1f);				if (x < 0)				{					x += minX;				}				else				{					x += maxX;				}			}  else			{				x = UnityEngine.Random.Range(-1f + minX, 1f + maxX);			}			float z;			if (rand == 1)			{				z = UnityEngine.Random.Range(-1f, 1f);				if (z < 0)				{					z += minX;				}				else				{					z += maxX;				}			} else			{				z = UnityEngine.Random.Range(-1f + minZ, 1f + maxZ);			}			monster.transform.localPosition = new Vector3(x, 0, z);			monster.Init(mInfo);			currentMonsters.Add(monster);		}	}	private void Update()	{		Spawn();	}	private void OnDestroy()	{		currentMonsters.Clear();	}}